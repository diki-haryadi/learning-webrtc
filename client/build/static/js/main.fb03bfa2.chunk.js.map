{"version":3,"sources":["Sender.tsx","Receiver.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Sender","setSenderStreamID","sentVideoRef","useRef","websocket","pcSend","useState","videoMuted","setVideoMuted","muted","setMuted","screenShareEnabled","setScreenShareEnabled","connectionState","setConnectionState","successCallback","useCallback","stream","current","srcObject","id","useEffect","navigator","mediaDevices","getUserMedia","video","audio","then","catch","console","error","iceServers","urls","handleStartPublishing","a","WebSocket","onopen","log","onmessage","e","response","JSON","parse","data","type","setRemoteDescription","candidate","target","addIceCandidate","RTCPeerConnection","onconnectionstatechange","onnegotiationneeded","readyState","OPEN","createOffer","offer","setLocalDescription","send","stringify","sdp","onicecandidate","event","candidates","getTracks","t","addTrack","setTimeout","removeScreenShare","sender","getSenders","find","s","track","removeTrack","undefined","handleScreenShare","stop","getDisplayMedia","media","screenTrack","onended","className","autoPlay","ref","includes","onClick","getAudioTracks","forEach","enabled","m","getVideoTracks","Receiver","senderStreamID","streams","setStreams","pinStream","setPinStream","createAnswer","answer","ontrack","onremovetrack","filter","str","length","active","map","indexOf","push","index","Video","recvVideoRef","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb03bfa2.chunk.js","sourcesContent":["import {useCallback, useEffect, useRef, useState} from 'react';\nimport { AiOutlineAudio, AiOutlineAudioMuted } from 'react-icons/ai';\nimport { FiVideo, FiVideoOff } from 'react-icons/fi';\nimport { MdScreenShare,MdStopScreenShare } from 'react-icons/md';\n\nexport const Sender: React.FC<any> = ({ setSenderStreamID }) => {\n  const sentVideoRef = useRef<HTMLVideoElement>(null);\n  const websocket = useRef<WebSocket>();\n  const pcSend = useRef<RTCPeerConnection>();\n\n  const [videoMuted, setVideoMuted] = useState(false);\n  const [muted, setMuted] = useState(false);\n\n  const [screenShareEnabled, setScreenShareEnabled] = useState<MediaStreamTrack>();\n\n  const [connectionState, setConnectionState] =\n    useState<RTCPeerConnectionState>('new');\n  const successCallback = useCallback((stream: any) => {\n    if (sentVideoRef.current) {\n      sentVideoRef.current.srcObject = stream;\n      setSenderStreamID(stream.id);\n    }\n  }, [sentVideoRef, setSenderStreamID]);\n\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true,\n    })\n        .then(successCallback)\n        .catch(console.error);\n  }, [successCallback]);\n\n  // Free public STUN servers provided by Google.\n  const iceServers = {\n    iceServers: [\n      { urls: 'stun:stun.l.google.com:19302' },\n      { urls: 'stun:stun1.l.google.com:19302' },\n      { urls: 'stun:stun2.l.google.com:19302' },\n      { urls: 'stun:stun3.l.google.com:19302' },\n      { urls: 'stun:stun4.l.google.com:19302' },\n    ],\n  };\n\n  const handleStartPublishing = async () => {\n    setConnectionState('connecting');\n\n    if (!sentVideoRef.current) {\n      return;\n    }\n\n    websocket.current = new WebSocket(\n      'wss://ws.haryadi.my.id/ws'\n    );\n    websocket.current.onopen = () => console.log('connection opened');\n    websocket.current.onmessage = async (e) => {\n      const response = JSON.parse(e.data);\n      if (response.type === 'answer') {\n        await pcSend.current?.setRemoteDescription(response);\n        console.log('set-remote-description');\n      }\n\n      if (response.candidate && response.target === 0) {\n        await pcSend.current?.addIceCandidate(response.candidate);\n        console.log('add-ice-candidate');\n      }\n    };\n\n    pcSend.current = new RTCPeerConnection(iceServers);\n    pcSend.current.onconnectionstatechange = () => {\n      console.log('state: ', pcSend.current?.connectionState);\n      setConnectionState(pcSend.current?.connectionState || 'new');\n    };\n\n    pcSend.current.onnegotiationneeded = async () => {\n      console.log(\"negotiation is needed\");\n      if (websocket.current?.readyState === WebSocket.OPEN) {\n        const offer = await pcSend.current?.createOffer()\n        if (offer) {\n          await pcSend.current?.setLocalDescription(offer)\n          websocket.current?.send(\n            JSON.stringify({\n              type: 'offer',\n              data: offer.sdp,\n            })\n          );\n        }\n      }\n    }\n\n    //called after adding tracks\n    pcSend.current.onicecandidate = (event) => {\n      console.log('oniceCandiate Sender Called', websocket.current);\n\n      if (event.candidate && connectionState === 'connected') {\n        websocket.current?.send(\n          JSON.stringify({\n            type: 'tricle',\n            data: JSON.stringify({\n              target: 0,\n              candidates: event.candidate,\n            }),\n          })\n        );\n      }\n    };\n\n    // Before sending the offer to the ion-sfu server over Websockets we first need to add the video and audio stream.\n    // This is where the media device library comes into play to read the video from the camera.\n\n    const stream = sentVideoRef.current?.srcObject as MediaStream;\n    if (stream) {\n      for (const t of stream.getTracks()) {\n        console.log('adding tracks...');\n        pcSend.current?.addTrack(t, stream);\n      }\n    }\n    console.log('offer created');\n    const offer = await pcSend.current.createOffer();\n    pcSend.current.setLocalDescription(offer);\n\n    setTimeout(() => {\n      websocket.current?.send(\n        JSON.stringify({\n          type: 'offer',\n          data: offer.sdp,\n        })\n      );\n    }, 2000);\n  };\n\n  const removeScreenShare = () => {\n    const sender = pcSend.current?.getSenders().find(s => s.track?.id === screenShareEnabled?.id)\n    if (sender) {\n      pcSend.current?.removeTrack(sender);\n    }\n    setScreenShareEnabled(undefined);\n  }\n\n  const handleScreenShare = async () => {\n    if (screenShareEnabled) {\n      screenShareEnabled?.stop();\n      removeScreenShare();\n      return\n    }\n    try {\n      //@ts-ignore\n      const media = await navigator.mediaDevices.getDisplayMedia() as MediaStream;\n      const screenTrack = media.getTracks()\n      setScreenShareEnabled(screenTrack[0])\n\n      screenTrack[0].onended = removeScreenShare\n      await pcSend.current?.addTrack(screenTrack[0], media)\n\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  return (\n    <div className=\"w-full h-full\">\n      <video\n        className=\"object-cover h-full w-full\"\n        autoPlay\n        muted\n        ref={sentVideoRef}\n      ></video>\n      {['new', 'disconnected', 'failed'].includes(connectionState) && (\n        <button\n          className=\"bg-blue-700 absolute bottom-5 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white max-h-10 max-w-52 rounded-md px-5 py-2\"\n          onClick={handleStartPublishing}\n        >\n          JOIN\n        </button>\n      )}\n      {connectionState === 'connecting' && (\n        <p className=\"absolute bottom-5 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white max-h-10 max-w-52 rounded-md px-5 py-2\">\n          connecting...\n        </p>\n      )}\n      {connectionState === 'connected' && (\n        <div className=\"absolute bottom-5 left-1/2 transform -translate-x-1/2 -translate-y-1/2 flex flex-row\">\n          <button\n            className={`${muted ? 'bg-red-700' : 'bg-gray-800'\n              } transition duration-500 text-white max-h-10 max-w-52 rounded-md px-5 py-2`}\n            onClick={() => {\n              const video = sentVideoRef.current?.srcObject as MediaStream;\n              video.getAudioTracks().forEach((t) => (t.enabled = !t.enabled));\n              setMuted((m) => !m);\n            }}\n          >\n            {muted ? <AiOutlineAudioMuted /> : <AiOutlineAudio />}\n          </button>\n          <button\n            className={`${videoMuted ? 'bg-red-700' : 'bg-gray-800'\n              } transition duration-500  ml-2 text-white max-h-10 max-w-52 rounded-md px-5 py-2`}\n            onClick={() => {\n              const video = sentVideoRef.current?.srcObject as MediaStream;\n              video.getVideoTracks().forEach((t) => (t.enabled = !t.enabled));\n              setVideoMuted((m) => !m);\n            }}\n          >\n            {videoMuted ? <FiVideoOff /> : <FiVideo />}\n          </button>\n          <button onClick={handleScreenShare} className={`${!!screenShareEnabled ? \"bg-gray-800\": \"bg-red-800\" } transition duration-500  ml-2 text-white max-h-10 max-w-52 rounded-md px-5 py-2`}>\n          {screenShareEnabled?<MdScreenShare/> : <MdStopScreenShare/>}\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport { AiFillPushpin } from 'react-icons/ai';\n\nexport const Receiver: React.FC<any> = ({ senderStreamID }) => {\n  const websocket = useRef<WebSocket>();\n  const pcSend = useRef<RTCPeerConnection>();\n  const [streams, setStreams] = useState<MediaStream[]>([]);\n\n  const [pinStream, setPinStream] = useState<MediaStream | null>(null);\n\n  useEffect(() => {\n    handleStartPublishing();\n  }, []);\n\n  const [connectionState, setConnectionState] = useState<string>();\n\n  const handleStartPublishing = async () => {\n    websocket.current = new WebSocket(\n      'wss://ws.haryadi.my.id/ws'\n    );\n    // websocket.current = new WebSocket(\"ws://ec2-54-248-35-65.ap-northeast-1.compute.amazonaws.com:7000/ws\");\n    pcSend.current = new RTCPeerConnection();\n\n    websocket.current.onopen = () => console.log('connection opened');\n    websocket.current.onmessage = async (e) => {\n      const response = JSON.parse(e.data);\n      if (response.type === 'offer') {\n        await pcSend.current?.setRemoteDescription(response);\n        const answer = await pcSend.current?.createAnswer();\n\n        if (answer) {\n          await pcSend.current?.setLocalDescription(answer);\n          await websocket.current?.send(\n            JSON.stringify({\n              type: 'answer',\n              data: answer.sdp,\n            })\n          );\n        }\n        console.log('set-remote-description');\n      }\n\n      //target=1 -> subscriber(taker)\n      if (response.candidate && response.target === 1) {\n        pcSend.current?.addIceCandidate(response.candidate);\n        console.log('add-ice-candidate');\n      }\n    };\n\n    pcSend.current.onconnectionstatechange = () => {\n      console.log('state: ', pcSend.current?.connectionState);\n      setConnectionState(pcSend.current?.connectionState);\n    };\n\n    //stream sfu bata aayesi call huncha\n    // pcSend.current.ontrack = (e) => {\n    //   console.log('streams: ', e.streams);\n    //   if (recvVideoRef.current) {\n    //     recvVideoRef.current.srcObject = e.streams[0];\n    //   }\n    // };\n    pcSend.current.ontrack = (e) => {\n      console.log('got-streams: ', e.streams);\n      e.streams[0].onremovetrack = () => {\n        console.log('onremove track');\n        setStreams((s) => s.filter((str) => str.id !== e.streams[0].id));\n      };\n      setStreams((s) => {\n        if (e.streams.length === 1 && e.streams[0].active) {\n          if (s.map((s) => s.id).indexOf(e.streams[0].id) === -1) {\n            s.push(e.streams[0]);\n          }\n        }\n        return s;\n      });\n    };\n\n    pcSend.current.onicecandidate = (event) => {\n      if (event.candidate) {\n        websocket.current?.send(\n          JSON.stringify({\n            type: 'tricle',\n            data: JSON.stringify({\n              target: 1,\n              candidates: event.candidate,\n            }),\n          })\n        );\n      }\n    };\n  };\n\n  return (\n    <div className=\"grid grid-cols-3 gap-x-10 gap-y-10 p-20\">\n      {connectionState !== 'connected' && (\n        <p className=\"fixed right-1/2 top-1/2 transform translate-x-1/2 -translate-y-1/2 text-white\">\n          RETREIVING VIDEOS...\n        </p>\n      )}\n\n      {streams\n        .filter((s) => s.id !== senderStreamID && s.active)\n        .map((stream, index) => (\n          <div\n            className={` rounded-3xl overflow-hidden bg-gray-900 group transition duration-500 ${\n              pinStream === stream\n                ? 'max-h-screen fixed left-0 top-0 h-screen w-screen'\n                : 'relative w-full h-full max-h-96'\n            }`}\n            key={stream.id}\n          >\n            <Video srcObject={stream} />\n            <p className=\"absolute text-white top-0 left-3\">\n              FRIEND {index + 1}\n            </p>\n            <p\n              className=\"cursor-pointer absolute text-white top-1/2 bg-gray-800 px-2 left-1/2 text-2xl hidden group-hover:block \"\n              onClick={() =>\n                pinStream ? setPinStream(null) : setPinStream(stream)\n              }\n            >\n              <AiFillPushpin />\n            </p>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nconst Video: React.FC<any> = ({ srcObject }) => {\n  const recvVideoRef = useRef<HTMLVideoElement>(null);\n\n  useEffect(() => {\n    if (srcObject && recvVideoRef.current) {\n      recvVideoRef.current.srcObject = srcObject;\n    }\n  }, [srcObject]);\n\n  if (srcObject.active) {\n    return (\n      <video\n        autoPlay\n        ref={recvVideoRef}\n        className=\"object-cover w-full h-full\"\n      ></video>\n    );\n  }\n\n  return null;\n};\n","import { Sender } from './Sender';\nimport { Receiver } from './Receiver';\nimport { useState } from 'react';\n\nfunction App() {\n  const [senderStreamID, setSenderStreamID] = useState();\n\n  return (\n    <div className=\"bg-gray-800 min-h-screen overflow-auto\">\n      <div className=\"bg-gray-500 w-72 h-72 rounded-full fixed right-10 bottom-10 overflow-hidden z-10\">\n        <Sender setSenderStreamID={setSenderStreamID} />\n      </div>\n      <div className=\"relative\">\n        <Receiver senderStreamID={senderStreamID} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}